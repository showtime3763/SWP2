#include <Servo.h>

#define PIN_LED   9
#define PIN_TRIG  12
#define PIN_ECHO  13
#define PIN_SERVO 10

#define SND_VEL 346.0
#define INTERVAL 25
#define PULSE_DURATION 10
#define _DIST_MIN 180.0
#define _DIST_MAX 360.0

#define TIMEOUT ((INTERVAL / 2) * 1000.0)
#define SCALE (0.001 * 0.5 * SND_VEL)

#define _EMA_ALPHA 0.6

#define _TARGET_LOW  250.0
#define _TARGET_HIGH 290.0

#define _DUTY_MIN 0
#define _DUTY_NEU 1400
#define _DUTY_MAX 2800

float  dist_ema, dist_prev = _DIST_MAX;
unsigned long last_sampling_time;

Servo myservo;

void setup() {
  pinMode(PIN_LED, OUTPUT);
  pinMode(PIN_TRIG, OUTPUT);
  pinMode(PIN_ECHO, INPUT);
  digitalWrite(PIN_TRIG, LOW);

  myservo.attach(PIN_SERVO);
  myservo.writeMicroseconds(_DUTY_NEU);

  dist_prev = _DIST_MIN;

  Serial.begin(57600);
}

void loop() {
  float  dist_raw, dist_filtered;

  if (millis() < last_sampling_time + INTERVAL)
    return;

  dist_raw = USS_measure(PIN_TRIG, PIN_ECHO);

  if ((dist_raw == 0.0) || (dist_raw > _DIST_MAX)) {
      dist_filtered = dist_prev;
  } else if (dist_raw < _DIST_MIN) {
      dist_filtered = dist_prev;
  } else {
      dist_filtered = dist_raw;
      dist_prev = dist_raw;
  }

  dist_ema = dist_prev;

  long servo_duty;

  if (dist_filtered <= 180.0) { // 거리 18cm 이하: 0도 (_DUTY_MIN)
    myservo.writeMicroseconds(_DUTY_MIN);
  } else if (dist_filtered >= 360.0) { // 거리 36cm 이상: 180도 (_DUTY_MAX)
    myservo.writeMicroseconds(_DUTY_MAX);
  } else { // 거리 18cm ~ 36cm 사이: 거리에 비례하여 0도 ~ 180도
    // dist_filtered (180.0 ~ 360.0)을 servo_duty (_DUTY_MIN ~ _DUTY_MAX)로 변환
    // map(value, fromLow, fromHigh, toLow, toHigh)
    servo_duty = map((long)dist_filtered, 180, 360, _DUTY_MIN, _DUTY_MAX);
    myservo.writeMicroseconds(servo_duty);
  }

  Serial.print("Min:");    Serial.print(_DIST_MIN);
  Serial.print(",dist:");
  Serial.print(min(dist_raw, _DIST_MAX + 100));
  Serial.print(",ema:");
  Serial.print(min(dist_ema, _DIST_MAX + 100));
  Serial.print(",Low:");   Serial.print(_TARGET_LOW);
  Serial.print(",Servo:"); Serial.print(myservo.read());
  Serial.print(",Max:");   Serial.print(_DIST_MAX);
  Serial.println("");

  last_sampling_time += INTERVAL;
}

float USS_measure(int TRIG, int ECHO)
{
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(PULSE_DURATION);
  digitalWrite(TRIG, LOW);
  return pulseIn(ECHO, HIGH, TIMEOUT) * SCALE;
}
