#define PIN_LED  9
#define PIN_TRIG 12   
#define PIN_ECHO 13   

#define SND_VEL 346.0     
#define INTERVAL 25       
#define PULSE_DURATION 10 
#define _DIST_MIN 100.0   
#define _DIST_MAX 300.0   

#define TIMEOUT ((INTERVAL / 2) * 1000.0) 
#define SCALE (0.001 * 0.5 * SND_VEL)    

unsigned long last_sampling_time;  

void setup() {
  pinMode(PIN_LED, OUTPUT);
  pinMode(PIN_TRIG, OUTPUT);
  pinMode(PIN_ECHO, INPUT);
  digitalWrite(PIN_TRIG, LOW);
  Serial.begin(115200);
}

void loop() { 
  float distance;

  if (millis() < (last_sampling_time + INTERVAL))
    return;

  distance = USS_measure(PIN_TRIG, PIN_ECHO);

  int duty = 255; // 기본은 꺼짐
  if ((distance >= _DIST_MIN) && (distance <= _DIST_MAX)) {
    // 선형 보간: 100→255, 200→0, 300→255
    if (distance <= 200) {
      duty = mapFloat(distance, 100, 200, 255, 0);
    } else {
      duty = mapFloat(distance, 200, 300, 0, 255);
    }
    analogWrite(PIN_LED, duty);
  } else {
    analogWrite(PIN_LED, 255);
  }

  Serial.print("Min:");        Serial.print(_DIST_MIN);
  Serial.print(",distance:");  Serial.print(distance);
  Serial.print(",Max:");       Serial.print(_DIST_MAX);
  Serial.print(",duty:");      Serial.print(duty);
  Serial.println("");

  last_sampling_time += INTERVAL;
}

// 선형 보간 함수 (float 버전의 map)
float mapFloat(float x, float in_min, float in_max, float out_min, float out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

float USS_measure(int TRIG, int ECHO)
{
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(PULSE_DURATION);
  digitalWrite(TRIG, LOW);
  
  return pulseIn(ECHO, HIGH, TIMEOUT) * SCALE; // unit: mm
}
