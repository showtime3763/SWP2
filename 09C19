#define PIN_LED  9
#define PIN_TRIG 12   
#define PIN_ECHO 13   

// configurable parameters
#define SND_VEL 346.0     
#define INTERVAL 25      
#define PULSE_DURATION 10 
#define _DIST_MIN 100.0   
#define _DIST_MAX 300.0   
#define _EMA_ALPHA 0.2    
#define _MEDIAN_SAMPLES 30

#define TIMEOUT ((INTERVAL / 2) * 1000.0) 
#define SCALE (0.001 * 0.5 * SND_VEL) 

unsigned long last_sampling_time;
float dist_raw, dist_ema, dist_filtered, dist_prev, dist_median;


float dist_samples[_MEDIAN_SAMPLES];
int sample_index = 0;

void setup() {
  // initialize GPIO pins
  pinMode(PIN_LED, OUTPUT);
  pinMode(PIN_TRIG, OUTPUT); // sonar TRIGGER
  pinMode(PIN_ECHO, INPUT);   // sonar ECHO
  digitalWrite(PIN_TRIG, LOW); // turn-off Sonar 
  

  Serial.begin(115200);

  for(int i = 0; i < _MEDIAN_SAMPLES; i++) {
    dist_samples[i] = 0.0;
  }
}

// Function to calculate median of an array
float getMedian(float arr[], int n) {
  // Simple bubble sort for demonstration
  for(int i = 0; i < n - 1; i++) {
    for(int j = 0; j < n - i - 1; j++) {
      if(arr[j] > arr[j+1]) {
        float temp = arr[j];
        arr[j] = arr[j+1];
        arr[j+1] = temp;
      }
    }
  }
  // Return the middle element
  return arr[n/2];
}

void loop() { 

  if (millis() < (last_sampling_time + INTERVAL))
    return;
  
  // read distance
  dist_raw = USS_measure(PIN_TRIG, PIN_ECHO); 

  dist_samples[sample_index] = dist_raw;
  sample_index = (sample_index + 1) % _MEDIAN_SAMPLES;
  
  // Create a temporary array to sort without modifying the original
  float temp_samples[_MEDIAN_SAMPLES];
  memcpy(temp_samples, dist_samples, sizeof(dist_samples));

  // Calculate the median
  dist_median = getMedian(temp_samples, _MEDIAN_SAMPLES);
  // --- End of Median Filter ---


  dist_filtered = dist_median;


  dist_ema = _EMA_ALPHA * dist_filtered + (1 - _EMA_ALPHA) * dist_ema;

  if ((dist_filtered > _DIST_MIN) && (dist_filtered < _DIST_MAX)) {
    digitalWrite(PIN_LED, 0); // LED ON
  } else {
    digitalWrite(PIN_LED, 1); // LED OFF
  }

  // output the read value to the serial port
  Serial.print("Min:");
  Serial.print(_DIST_MIN);
  Serial.print(",raw:");
  Serial.print(dist_raw);
  Serial.print(",ema:");
  Serial.print(dist_ema);
  Serial.print(",median:");
  Serial.print(dist_median);
  Serial.print(",Max:");
  Serial.print(_DIST_MAX);
  Serial.println("");
  
  last_sampling_time += INTERVAL;
}

float USS_measure(int TRIG, int ECHO)
{
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(PULSE_DURATION);
  digitalWrite(TRIG, LOW);
  
  return pulseIn(ECHO, HIGH, TIMEOUT) * SCALE; // unit: mm
}
